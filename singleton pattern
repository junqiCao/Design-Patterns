# 单例模式

## 单例模式的优点
1. 由于单例模式在内存中只有一个实例，减少了**内存开销**，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显
2. 单例模式只生成一个实例，所以减少了系统的**性能开销**，当一个对象的产生需要较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生
一个单例对象，然后用永久驻留内存的方式来解决。
3. 单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对一个资源文件的同时写操作。
4. 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。
## 单例模式的缺点
1. 单例模式一般没有借口，扩展很困难，
2. 单例模式与单一职责有冲突
## 使用环境
在一个系统中要求一个类有且仅有一个对象
1.要求生成唯一序列号的环境
2.在整个项目中，需要一个共享访问点或共享数据，例如一个web页面上的计数器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保线程安全的，
3.创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源
4.需要定义大量的静态常量和静态方法环境

## 单例模式通用代码
'''
public class Singleton
{
  private static Singleton singleton =new Singleton() final;
  private Singleton()
  {
  }
  public static Singleton getSingleton()
  {
  }
  public static void doSomeThins()
  {
  }
}

'''
